<application>
  <component name="AppStorage">
    <histories>
      <item value="unPermission" />
      <item value="没有权限" />
      <item value="权限" />
      <item value="General apiDoc documentation blocks and old history blocks." />
      <item value="Authentication" />
      <item value="认证失败" />
      <item value="credentials" />
      <item value="Unauthorized" />
      <item value="parameter verification failed" />
      <item value="参数校验不通过" />
      <item value="占位" />
      <item value="占位符" />
      <item value="除以" />
      <item value="乘" />
      <item value="可用" />
      <item value=" '$utils' is declared but its value is never read." />
      <item value="SyntaxError: Unexpected identifier" />
      <item value="失败" />
      <item value="成功" />
      <item value="可选择1个标签，已选中1标签" />
      <item value="knowLedge" />
      <item value="theme" />
      <item value=" ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client" />
      <item value="app crashed - waiting for file changes before starting" />
      <item value="商讯" />
      <item value="修改" />
      <item value="秒" />
      <item value="分钟" />
      <item value="14" />
      <item value="Creates a Redux store that holds the state tree.  * The only way to change the data in the store is to call `dispatch()` on it.  *  * There should only be a single store in your app. To specify how different  * parts of the state tree respond to actions, you may combine several reducers  * into a single reducer function by using `combineReducers`.  *  * @param {Function} reducer A function that returns the next state tree, given  * the current state tree and the action to handle.  *  * @param {any} [preloadedState] The initial state. You may optionally specify it  * to hydrate the state from the server in universal apps, or to restore a  * previously serialized user session.  * If you use `combineReducers` to produce the root reducer function, this must be  * an object with the same shape as `combineReducers` keys.  *  * @param {Function} [enhancer] The store enhancer. You may optionally specify it  * to enhance the store with third-party capabilities such as middleware,  * time travel, persistence, etc. The only store enhancer that ships with Redux  * is `applyMiddleware()`.  *  * @returns {Store} A Redux store that lets you read the state, dispatch actions  * and subscribe to changes." />
      <item value="These are private action types reserved by Redux.  * For any unknown actions, you must return the current state.  * If the current state is undefined, you must return the initial state.  * Do not reference these action types directly in your code." />
      <item value="This is a dummy function to check if the function name has been altered by minification. * If the function has been minified and NODE_ENV !== 'production', warn the user." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="7" />
        <entry key="ENGLISH" value="7" />
      </map>
    </option>
  </component>
</application>